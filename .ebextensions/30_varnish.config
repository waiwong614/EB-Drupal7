option_settings:
  - namespace: aws:elasticbeanstalk:application:environment
    option_name: COMPOSER_HOME
    value: /root

  - option_name: SITE_URL
    value: placeholder

files:
  "/etc/yum.repos.d/varnish.repo" :
    owner: root
    group: root
    content: |
      # Create Varnish 4.x Repo since Amazon has older Varnish 3.x version
      [varnish]
      name=Varnish for Enterprise Linux 6
      baseurl=https://repo.varnish-cache.org/redhat/varnish-4.1/el6/
      enabled=1
      gpgkey=https://repo.varnish-cache.org/GPG-key.txt
      gpgcheck=1

  "/etc/sysconfig/varnish" :
    mode: "000644"
    owner: root
    group: root
    content: |
      # Configuration file for Varnish Cache
      #
      # /etc/init.d/varnish expects the variable $DAEMON_OPTS to be set from this
      # shell script fragment.

      # Maximum number of open files (for ulimit -n)
      NFILES=131072

      # Locked shared memory (for ulimit -l)
      # Default log size is 82MB + header
      MEMLOCK=82000

      # Maximum number of threads (for ulimit -u)
      NPROCS="unlimited"

      # Maximum size of corefile (for ulimit -c). Default in Fedora is 0
      # DAEMON_COREFILE_LIMIT="unlimited"

      # Init script support to reload/switch vcl without restart.
      # To make this work, you need to set the following variables
      # explicit: VARNISH_VCL_CONF, VARNISH_ADMIN_LISTEN_ADDRESS,
      # VARNISH_ADMIN_LISTEN_PORT, VARNISH_SECRET_FILE.
      RELOAD_VCL=1

      # Set WARMUP_TIME to force a delay in reload-vcl between vcl.load and vcl.use
      # This is useful when backend probe definitions need some time before declaring
      # configured backends healthy, to avoid routing traffic to a non-healthy backend.
      #WARMUP_TIME=0

      # Main configuration file.
      VARNISH_VCL_CONF=/etc/varnish/default.vcl
      #
      # Default address and port to bind to
      # Blank address means all IPv4 and IPv6 interfaces, otherwise specify
      # a host name, an IPv4 dotted quad, or an IPv6 address in brackets.
      VARNISH_LISTEN_PORT=80
      #
      # Telnet admin interface listen address and port
      VARNISH_ADMIN_LISTEN_ADDRESS=127.0.0.1
      VARNISH_ADMIN_LISTEN_PORT=2000
      #
      # Shared secret file for admin interface
      VARNISH_SECRET_FILE=/etc/varnish/secret
      #
      # The minimum number of worker threads to start
      VARNISH_MIN_THREADS=50
      #
      # The Maximum number of worker threads to start
      VARNISH_MAX_THREADS=1000
      #
      # Cache file size: in bytes, optionally using k / M / G / T suffix.
      VARNISH_STORAGE_SIZE=256M
      #
      # Backend storage specification
      VARNISH_STORAGE="malloc,${VARNISH_STORAGE_SIZE}"
      #
      # Default TTL used when the backend does not specify one
      VARNISH_TTL=120
      #
      # DAEMON_OPTS is used by the init script.
      DAEMON_OPTS="-a ${VARNISH_LISTEN_ADDRESS}:${VARNISH_LISTEN_PORT} -f ${VARNISH_VCL_CONF} -T ${VARNISH_ADMIN_LISTEN_ADDRESS}:${VARNISH_ADMIN_LISTEN_PORT} -p thread_pool_min=${VARNISH_MIN_THREADS} -p thread_pool_max=${VARNISH_MAX_THREADS} -S ${VARNISH_SECRET_FILE} -s ${VARNISH_STORAGE}"

  "/etc/varnish/default.vcl" :
    mode: "000644"
    owner: root
    group: root
    content: |
      vcl 4.0;
      # https://www.drupal.org/docs/7/caching-to-improve-performance/varnish-4x-configuration
      # https://ixorthings.blogspot.com/2015/11/a-working-varnish-41-vcl-config-for.html
      # SSL may come in hand: https://2bits.com/articles/how-configure-varnish-cache-drupal-ssl-termination-using-pound-or-nginx.html
      # http://www.servermom.org/install-varnish-4-lamp-centos-7/1972/
      # http://linuxdev.dk/articles/varnish-and-drupal-7
      import std;
      import directors;

      backend server1 {
        .host = "127.0.0.1";
        .port = "8080";
        .first_byte_timeout     = 300s;   # How long to wait before we receive a first byte from our backend?
        .connect_timeout        = 5s;     # How long to wait for a backend connection?
        .between_bytes_timeout  = 2s;     # How long to wait between bytes received from our backend?
      }

      acl purge {
        "localhost";
        "127.0.0.1";
        "161.149.0.0"/16;
        "23.241.212.199"/32;
      }

      sub vcl_init {
      # Called when VCL is loaded, before any requests pass through it. Typically used to initialize VMODs.
        new vdir = directors.round_robin();
        vdir.add_backend(server1);
        # vdir.add_backend(server...);
        # vdir.add_backend(servern);
      }

      sub vcl_recv {
      # Called at the beginning of a request, after the complete request has been received and parsed. Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable, which backend to use.
      # also used to modify the request
        set req.backend_hint = vdir.backend(); # send all traffic to the vdir director
        set req.http.grace = "none";
      
        if (req.restarts == 0) {
          if (req.http.X-Forwarded-For) {
            set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
          } else {
            set req.http.X-Forwarded-For = client.ip;
          }
        }

        # Normalize the header, remove the port (in case you're testing this on various TCP ports)
        set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");
        
        # Normalize the query arguments
        set req.url = std.querysort(req.url);

        # Only deal with "normal" types
        if (req.method != "GET" &&
                req.method != "HEAD" &&
                req.method != "PUT" &&
                req.method != "POST" &&
                req.method != "TRACE" &&
                req.method != "OPTIONS" &&
                req.method != "PATCH" &&
                req.method != "DELETE") {
            /* Non-RFC2616 or CONNECT which is weird. */
            return (pipe);
        }

        # Only allow certain IP to access install.php, cron, etc. 
        if (req.url ~ "^/(cron|install|settings|update)\.php$" && !client.ip ~ purge) {
          #set req.url = "/404";
          return (synth(404, "Not Found."));
        }

        # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
        if (req.http.Upgrade ~ "(?i)websocket") {
            return (pipe);
        }
    
        # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
        if (req.method != "GET" && req.method != "HEAD") {
            return (pass);
        }

        # Strip hash, server doesn't need it.
        if (req.url ~ "\#") {
            set req.url = regsub(req.url, "\#.*$", "");
        }
    
        # Strip a trailing ? if it exists
        if (req.url ~ "\?$") {
            set req.url = regsub(req.url, "\?$", "");
        }

        # http://varnish.projects.linpro.no/wiki/VCLExampleEnableForceRefresh
        # Ignore requests via proxy caches and badly behaved crawlers
        # like msnbot that send no-cache with every request.
        #if (! (req.http.Via || req.http.User-Agent ~ "(?i)bot" || req.http.X-Purge)) {
            #set req.hash_always_miss = true; # Doesn't seems to refresh the object in the cache
        #    return(purge); # Couple this with restart in vcl_purge and X-Purge header to avoid loops
        #}
    
        # Large static files are delivered directly to the end-user without
        # waiting for Varnish to fully read the file first.
        # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
        if (req.url ~ "^[^?]*\.(mp[34]|rar|tar|tgz|gz|wav|zip|bz2|xz|7z|avi|mov|ogm|mpe?g|mk[av])(\?.*)?$") {
            unset req.http.Cookie;
            return (hash);
        }

        # Deny access to the user login form for obvious bot user-agents.
        # Denying access here prevents an unnecessary Drupal bootstrap
        if (
            req.http.User-Agent ~ "[Bb]ot"
          ) {
          if (   req.url ~ "^/login"
              || req.url ~ "^/user/login"
              || req.url ~ "^/saml_login"
              || req.url ~ "^/shib_login"
              || req.url ~ "^/user"
              || req.url ~ "^/index.php\?q=/login"
              || req.url ~ "^/index.php\?q=/user/login"
              || req.url ~ "^/index.php\?q=/saml_login"
              || req.url ~ "^/index.php\?q=/shib_login"
              || req.url ~ "^/index.php\?q=/user"
            ) {
            # Optionally log requests to collect User-Agents.
            std.syslog(131,"Error: 403|Host:" + req.http.host + "|URL:" + req.url + "|Message:Blocked in sub bot_user_login|User-Agent:" + req.http.User-Agent);
            return(synth(403, "Access Denied."));
          }
        }

        # block an empty user-agent and empty referrer
        #if (req.http.User-Agent ~ "^$" && req.http.Referer ~ "^$") {
        #  return (synth(204, "No Content"));
        #}

        # Generate a 404 error for known nonexistent or hidden URLs WITHOUT causing a Drupal bootstrap,
        # even when the Search404 module is enabled.
        # This should be used primarily to block Wordpress admin URLs and other URLs that are
        # specific to content management systems we do not host.
        if (req.url ~ "/administrator/index.php"
          || req.url ~ "/ucp.php\?.*"
          || req.url ~ "/ucp.php$"
          || req.url ~ "/\.index.php\?.*option=com_acajoom.*"
          || req.url ~ "proc/self/environ"
          || req.url ~ "/autodiscover.xml"
          || req.url ~ "README.txt"
          || req.url ~ "CHANGELOG.txt"
          || req.url ~ "PATCHES.txt"
          || req.url ~ "LICENSE.txt"
          || req.url ~ "MAINTAINERS.txt"
          || req.url ~ "web.config"
          || req.url ~ "robots.txt.core$"
          || req.url ~ "UPGRADE.txt"
          || req.url ~ "INSTALL.txt"
          || req.url ~ "\.save"
          || req.url ~ "\.bkp"
          || req.url ~ "\.bak"
          || req.url ~ "\.xxx"
          || req.url ~ "\.aspx?\?.*"
          || req.url ~ "\.aspx?$"
          || req.url ~ "main.php"
          || req.url ~ "contact.php"
          || req.url ~ "main.jsp"
          || req.url ~ "main.html"
          || req.url ~ "redirect.php"
          || req.url ~ "setup.php"
          || req.url ~ "/wp-content/"
          || req.url ~ "/fckeditor*"
          || req.url ~ "^/https?:"
          || req.url ~ "/myadmin/scripts/"
          || req.url ~ "/MyAdmin/scripts/"
          || req.url ~ "phpmyadmin/scripts/"
          || req.url ~ "phpMyAdmin/scripts/"
          || req.url ~ "/wp-content/plugins/"
          || req.url ~ "/blog/wp-i*"
          || req.url ~ "/wp-admin/"
          || req.url ~ "/muieblackcat*"
          || req.url ~ "manager/html"
          || req.url ~ "/check_proxy"
          || req.url ~ "/invoker/JMXInvokerServlet"
          || req.url ~ "/jenkins"
          || req.url ~ "/pma/scripts/"
          || req.url ~ "/RemoteControl.html"
          || req.url ~ "/admin.php"
          || req.url ~ "azenv.php*"
          || req.url ~ "testproxy.php"
          || req.url ~ "/Http/DataLayCfg.xml"
          || req.url ~ "/www/start.html"
          || req.url ~ "wp-login.php"
          || req.url ~ "/w00tw00t*"
          || req.url ~ "/cas/login.action"
          || req.url ~ "/typo3/"
          || req.url ~ "/admin/index.php"
          || req.url ~ "/wordpress/"
          || req.url ~ "/drupal/"
        ) {
            # Optionally log requests to collect User-Agents.
            std.syslog(131,"Error: 404|Host:" + req.http.host + "|URL:" + req.url + "|Message:Blocked bot_404|User-Agent:" + req.http.User-Agent);
          return(synth(404, "Page not found."));
        }

        # Do not cache these paths.
        if (req.url ~ "^/status\.php$" ||
            req.url ~ "^/update\.php" ||
            req.url ~ "^/install\.php" ||
            req.url ~ "^/apc\.php$" ||
            req.url ~ "^/admin" ||
            req.url ~ "^/admin/.*$" ||
            req.url ~ "^/user" ||
            req.url ~ "^/user/.*$" ||
            req.url ~ "^/users/.*$" ||
            req.url ~ "^/info/.*$" ||
            req.url ~ "^/flag/.*$" ||
            req.url ~ "^.*/ajax/.*$" ||
            req.url ~ "^.*/ahah/.*$" ||
            req.url ~ "^/system/files/.*$") {
          return (pass);
        }

        ## BACKUP AND MIGRATE MODULE ##
        # Backup and Migrate is a very popular Drupal module that needs to be excluded
        # It won't work with Varnish
        if (req.url ~ "^/admin/content/backup_migrate/export") {
            return (pipe);
        }

        ## COOKIES ##
        # Always cache the following file types for all users. This list of extensions
        # appears twice, once here and again in vcl_fetch so make sure you edit both
        # and keep them equal.
        if (req.url ~ "(?i)\.(pdf|asc|dat|txt|doc|xls|ppt|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
          unset req.http.Cookie;
        }

        # Remove all cookies that Drupal doesn't need to know about. We explicitly
        # list the ones that Drupal does need, the SESS and NO_CACHE. If, after
        # running this code we find that either of these two cookies remains, we
        # will pass as the page cannot be cached.
        if (req.http.Cookie) {
          # 1. Append a semi-colon to the front of the cookie string.
          # 2. Remove all spaces that appear after semi-colons.
          # 3. Match the cookies we want to keep, adding the space we removed
          #    previously back. (\1) is first matching group in the regsuball.
          # 4. Remove all other cookies, identifying them by the fact that they have
          #    no space after the preceding semi-colon.
          # 5. Remove all spaces and semi-colons from the beginning and end of the
          #    cookie string.
          set req.http.Cookie = ";" + req.http.Cookie;
          set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
          set req.http.Cookie = regsuball(req.http.Cookie, ";(SESS[a-z0-9]+|SSESS[a-z0-9]+|NO_CACHE)=", "; \1=");
          set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
          set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

          if (req.http.Cookie == "") {
            # If there are no remaining cookies, remove the cookie header. If there
            # aren't any cookie headers, Varnish's default behavior will be to cache
            # the page.
            unset req.http.Cookie;
          }
          else {
            # If there is any cookies left (a session or NO_CACHE cookie), do not
            # cache the page. Pass it on to Apache directly.
            return (pass);
          }
        }

        # Check the incoming request type is "PURGE", not "GET" or "POST".
        if (req.method == "PURGE") { # Check if the IP is allowed.
          if (!client.ip ~ purge) {
            # Not from an allowed IP? Then Return error code 405 (Forbidden) when not.
            return (synth(405, "Not allowed."));
          }
          return (purge);
        }
      }

      # Set a header to track a cache HIT/MISS.
      sub vcl_deliver {
        set resp.http.grace = req.http.grace;
        if (obj.hits > 0) {
          set resp.http.X-Varnish-Cache = "HIT";
        }
        else {
          set resp.http.X-Varnish-Cache = "MISS";
        }

        # Please note that obj.hits behaviour changed in 4.0, now it counts per objecthead, not per object
        # and obj.hits may not be reset in some cases where bans are in use. See bug 1492 for details.
        # So take hits with a grain of salt
        set resp.http.X-Cache-Hits = obj.hits;

        # Remove some headers: PHP version
        unset resp.http.X-Powered-By;
    
        # Remove some headers: Apache version & OS
        unset resp.http.Server;
        unset resp.http.X-Drupal-Cache;
        # unset resp.http.X-Varnish;
        unset resp.http.Via;
        unset resp.http.Link;
      }

      sub vcl_pipe {
      # Called upon entering pipe mode. In this mode, the request is passed on to the backend, and any further data from both the client and backend is passed on unaltered until either end closes the connection. Basically, Varnish will degrade into a simple TCP proxy, shuffling bytes back and forth. For a connection in pipe mode, no other VCL subroutine will ever get called after vcl_pipe.
          # Note that only the first request to the backend will have
          # X-Forwarded-For set.  If you use X-Forwarded-For and want to
          # have it set for all requests, make sure to have:
          # set bereq.http.connection = "close";
          # here.  It is not set by default as it might break some broken web
          # applications, like IIS with NTLM authentication.
      
          #set bereq.http.Connection = "Close";
      
          # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
              if (req.http.upgrade) {
                  set bereq.http.upgrade = req.http.upgrade;
              }
      
          return (pipe);
      }

      sub vcl_hit {
      # Called when a cache lookup is successful.
      # https://info.varnish-software.com/blog/grace-varnish-4-stale-while-revalidate-semantics-varnish
          if (obj.ttl >= 0s) {
              # A pure unadultered hit, deliver it
              return (deliver);
          }
      
          # https://www.varnish-cache.org/docs/trunk/users-guide/vcl-grace.html
          # When several clients are requesting the same page Varnish will send one request to the backend and place the others on hold while fetching one copy from the backend. In some products this is called request coalescing and Varnish does this automatically.
          # If you are serving thousands of hits per second the queue of waiting requests can get huge. There are two potential problems - one is a thundering herd problem - suddenly releasing a thousand threads to serve content might send the load sky high. Secondly - nobody likes to wait. To deal with this we can instruct Varnish to keep the objects in cache beyond their TTL and to serve the waiting requests somewhat stale content.
      
      #   if (!std.healthy(req.backend_hint) && (obj.ttl + obj.grace > 0s)) {
      #       return (deliver);
      #   } else {
      #       return (fetch);
      #   }
      
          # We have no fresh fish. Lets look at the stale ones.
          if (std.healthy(req.backend_hint)) {
              # Backend is healthy. Limit age to 10s.
                  if (obj.ttl + 10s > 0s) {
                      #set req.http.grace = "normal(limited)";
                      return (deliver);
                  } else {
                      # No candidate for grace. Fetch a fresh object.
                  return(fetch);
              }
          } else {
              # backend is sick - use full grace
                  if (obj.ttl + obj.grace > 0s) {
                      #set req.http.grace = "full";
                  return (deliver);
              } else {
                  # no graced object.
                  return (fetch);
              }
          }
      
      
          # fetch & deliver once we get the result
          return (fetch); # Dead code, keep as a safeguard
      }

      sub vcl_miss {
      # Called after a cache lookup if the requested document was not found in the cache. Its purpose is to decide whether or not to attempt to retrieve the document from the backend, and which backend to use.
      
          return (fetch);
      }

      sub vcl_backend_response {
        # We need this to cache 404s, 301s, 500s. Otherwise, depending on backend but
        # definitely in Drupal's case these responses are not cacheable by default.
        if (beresp.status == 404 || beresp.status == 301 || beresp.status == 500) {
          set beresp.ttl = 10m;
        }
        # Don't allow static files to set cookies.
        # (?i) denotes case insensitive in PCRE (perl compatible regular expressions).
        # This list of extensions appears twice, once here and again in vcl_recv so
        # make sure you edit both and keep them equal.
        if (bereq.url ~ "(?i)\.(pdf|asc|dat|txt|doc|xls|ppt|tgz|csv|png|gif|jpeg|jpg|ico|swf|css|js)(\?.*)?$") {
          unset beresp.http.set-cookie;
        }

        # Large static files are delivered directly to the end-user without
        # waiting for Varnish to fully read the file first.
        # Varnish 4 fully supports Streaming, so use streaming here to avoid locking.
        if (bereq.url ~ "^[^?]*\.(mp[34]|rar|tar|tgz|gz|wav|zip|bz2|xz|7z|avi|mov|ogm|mpe?g|mk[av])(\?.*)?$") {
            unset beresp.http.set-cookie;       
            set beresp.do_stream = true;    # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if 
            # the backend doesn't send a Content-Length header, so only enable it for big objects
            set beresp.do_gzip = false; # Don't try to compress it for storage
        }

        # Allow stale content, in case the backend goes down.
        # make Varnish keep all objects for 6 hours beyond their TTL
        set beresp.grace = 6h;
      }

      # In the event of an error, show friendlier messages.
      sub vcl_backend_error {
        # Redirect to some other URL in the case of a homepage failure.
        #if (bereq.url ~ "^/?$") {
        #  set beresp.status = 302;
        #  set beresp.http.Location = "http://backup.example.com/";
        #}
        # Otherwise redirect to the homepage, which will likely be in the cache.
        set beresp.http.Content-Type = "text/html; charset=utf-8";
        synthetic({"
      <html>
      <head>
        <title>Page Unavailable</title>
        <style>
          body { background: #303030; text-align: center; color: white; }
          #page { border: 1px solid #CCC; width: 500px; margin: 100px auto 0; padding: 30px; background: #323232; }
          a, a:link, a:visited { color: #CCC; }
          .error { color: #222; }
        </style>
      </head>
      <body onload="setTimeout(function() { window.location = '/' }, 5000)">
        <div id="page">
          <h1 class="title">Page Unavailable</h1>
          <p>The page you requested is temporarily unavailable.</p>
          <p>We're redirecting you to the <a href="/">homepage</a> in 5 seconds.</p>
          <div class="error">(Error "} + beresp.status + " " + beresp.reason + {")</div>
        </div>
      </body>
      </html>
      "});
        return (deliver);
      }

      sub vcl_purge {
          # restart request
          set req.http.X-Purge = "Yes";
          return(restart);
      }

      sub vcl_synth {
        set resp.http.Content-Type = "text/html; charset=utf-8";
        synthetic({"
      <html>
      <head>
        <title>Page Unavailable</title>
        <style>
          body { background: #303030; text-align: center; color: white; }
          #page { border: 1px solid #CCC; width: 500px; margin: 100px auto 0; padding: 30px; background: #323232; }
          a, a:link, a:visited { color: #CCC; }
          .error { color: #222; }
        </style>
      </head>
      <body onload="setTimeout(function() { window.location = '/' }, 5000)">
        <div id="page">
          <h1 class="title">Page Unavailable</h1>
          <p>The page you requested is temporarily unavailable.</p>
          <p>We're redirecting you to the <a href="/">homepage</a> in 5 seconds.</p>
          <div class="error">(Error "} + resp.status + " " + resp.reason + {")</div>
        </div>
      </body>
      </html>
      "});
        return (deliver);
      }

      sub vcl_fini {
      # Called when VCL is discarded only after all requests have exited the VCL. Typically used to clean up VMODs.
          return (ok);
      }

  "/etc/varnish/secret" :
      owner: root
      group: root
      content: |
        6f9f342c-720x-900b-4cc4-02b99d1b08e7

commands:
  001_update_composer:
    command: export COMPOSER_HOME=/root && /usr/bin/composer.phar self-update
  002_jemalloc_install:
    command: "rpm -ivh --replacepkgs http://dl.fedoraproject.org/pub/epel/6/x86_64/jemalloc-3.6.0-1.el6.x86_64.rpm"
  003_varnish_install:
    command: "yum install -y varnish --disablerepo=amzn-updates --disablerepo=amzn-main --disablerepo=epel"
  010_httpd.conf:
    command: "sed -i 's/Listen 8080/Listen 80/g' /etc/httpd/conf/httpd.conf"
  011_httpd.conf:
    command: "sed -i 's/Listen 80/Listen 8080/g' /etc/httpd/conf/httpd.conf"
  040_varnish:
    command: "sed -i 's/VARNISH_LISTEN_PORT=6081/VARNISH_LISTEN_PORT=80/g' /etc/sysconfig/varnish"
  041_varnish:
    command: "sed -i 's/VARNISH_ADMIN_LISTEN_PORT=6082/VARNISH_ADMIN_LISTEN_PORT=2000/g' /etc/sysconfig/varnish"

services:
  sysvinit:
    varnish:
      enabled: true
      ensureRunning: true
